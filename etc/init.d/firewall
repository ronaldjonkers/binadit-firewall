#!/bin/bash
#
## 	binadit firewall installation script.
## 	This script must be run as root and be executable (chmod +x /etc/init.d/firewall)
##
## 	Just added IPv6 | june 2013
## 	DMZ IPv6 | sept 2013
## 	Blacklist ipv6 | nov 2013
##	Added ips for SSH Access | feb 2014
##	IP range dmz in- and output | mrt 2014
##	IP range dmz fix voor IPv6 | may 2014
##	ICMP types activated voor IPv4  | nov 2014
##	Added multicast enable option | nov 2014
##	Added SSH port detection | 16 jan 2015
##	Complete redesign of script | 17 jan 2015
##	Added full Ubuntu and Debian support | 19 jan 2015
##	Added tcp outgoing or ingoing only option and NAT routing | 20 jan 2015
##
#
#chkconfig: 345 99 01
#
#
### BEGIN INIT INFO
# Provides:        firewall
# Required-Start:  mountkernfs $local_fs
# Required-Stop:   $local_fs
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: Firewall
### END INIT INFO

CONFIGFOLDER="/etc/firewall.d"
SSHPORT=`grep "Port " /etc/ssh/sshd_config | awk '{print $2}'`
IPTABLES=`which iptables`
IP6TABLES=`which ip6tables`
IPTABLESSAVE=`which iptables-save`
IP6TABLESSAVE=`which ip6tables-save`
SERVICE=`which service`
SSHACCESSnew=""
DMZSnew=""

function setup() {
	if [ ! -d "$CONFIGFOLDER" ]; then
		mkdir $CONFIGFOLDER
		
		echo "# This file is required and is processed by /etc/init.d/firewall
TCPPORTS=\"22 80 443\"			# TCP ports to open. example: 21 22 80 443 20000:25000
TCPPORTS_INPUT=\"\"			# TCP ports, only incoming
TCPPORTS_OUTPUT=\"123\"		# TCP ports, only outgoing
UDPPORTS=\"123\"   			# UDP ports to open
DMZS=\"\"  					# IP, hostname and/or IP blocks that should have full access
SSHACCESS=\"\" 				# IP addresses with ssh access
SSHACCESS_IPv6=\"\"  			# IP addresses with ssh access, NO HOSTNAMES!!
DMZRANGE=\"\"    				# ALLOW range of ip addresses. example: 65.208.151.1-65.208.151.254
BLACKLIST=\"\"     			# IP's that can never access server
BLOCKRANGE=\"\"    			# Block range of ip addresses. example: 65.208.151.1-65.208.151.254
DMZS_IPv6=\"\"     			# IPs and blocks that should have full access. example: 2091:1af8:4400:b070:0000:0000:0000:0000-2091:1af8:4400:b070:ffff:ffff:ffff:ffff
BLACKLIST_IPv6=\"\"    		# IP's that can never access server
MULTICAST_ENABLE=\"TRUE\"			# Enable multicast traffic
NATROUTER_ENABLE=\"FALSE\"		# Enable multicast traffic" > $CONFIGFOLDER/host.conf

		echo "Config ${CONFIGFOLDER}/host.conf first, before starting firewall"
		exit 1
	fi
}

# Check if firewall is correctly installed
setup

#OS CHECK
	if [ -f /usr/bin/lsb_release ]; then
		distro=`/usr/bin/lsb_release -a | grep "Distributor ID" | awk '{print $3}'`
		if [ $distro == "Ubuntu" ] || [ $distro == "Debian" ]; then
			echo "We are using Debian or Ubuntu"
			iptablesFile="/etc/iptables/rules.v4"
			ip6tablesFile="/etc/iptables/rules.v6"
			IPTABLESSERVICE="iptables-persistent"
			IP6TABLESSERVICE=""
			if [ ! -f $iptablesFile ]; then
				aptitude -y install iptables-persistent
			fi
		fi
	fi
	
	if [ -f /etc/redhat-release ]; then
		echo "We are using Centos, Redhat or Fedora"
		iptablesFile="/etc/sysconfig/iptables"
		ip6tablesFile="/etc/sysconfig/ip6tables"
		IPTABLESSERVICE="iptables"
		IP6TABLESSERVICE="ip6tables"
	fi

# Load config file
source $CONFIGFOLDER/host.conf

function f_is_ip(){
	IP="`echo "$1" | /bin/egrep "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"`"
	if [ "$IP" != "" ]
	then
		firewallIP=$1
	else
		firewallIP=`dig +short $1 | awk '{print; exit}'` # FOR IPV6 dig +short nul-1.binadit.com AAAA| awk '{print; exit}'
	fi
}

function changeVariables() {
	for ip in $SSHACCESS; do
		f_is_ip $ip
  		SSHACCESSnew="$SSHACCESSnew $firewallIP"
  	done
  	for ip in $DMZS; do
		f_is_ip $ip
  		DMZSnew="$DMZSnew $firewallIP"
  	done
}

purge() {
	echo "Firewall: Purging and allowing all traffic"
		
	if [ -f /etc/redhat-release ]; then
		$IPTABLES -F
		$IPTABLES -X
		$IPTABLES -Z
		$IPTABLES -P INPUT ACCEPT
		$IPTABLES -P OUTPUT ACCEPT
		$IPTABLES -P FORWARD ACCEPT
		
		$IP6TABLES -F
		$IP6TABLES -X
		$IP6TABLES -Z
		$IP6TABLES -P INPUT ACCEPT
		$IP6TABLES -P OUTPUT ACCEPT
		$IP6TABLES -P FORWARD ACCEPT
	else 
		$SERVICE $IPTABLESSERVICE flush
	fi
	
	echo "" > $iptablesFile
	echo "" > $ip6tablesFile
}

setup() {
	
	/sbin/modprobe ip_conntrack
/sbin/modprobe ip_conntrack_ftp
	$SERVICE $IPTABLESSERVICE start
	#$SERVICE $IP6TABLES start
	echo "Firewall: Setup traffic filtering"
	
	changeVariables

# IP4TABLES	
	# Default actions
	$IPTABLES -P INPUT DROP
	$IPTABLES -P FORWARD DROP
	$IPTABLES -P OUTPUT DROP
	
	# Localhost
	$IPTABLES -A INPUT -i lo -j ACCEPT
	$IPTABLES -A OUTPUT -o lo -j ACCEPT
	
	# Default state
	$IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	$IPTABLES -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# NAT ROUTING
	if [ "$NATROUTER_ENABLE" == "TRUE" ]; then
		echo 1 > /proc/sys/net/ipv4/ip_forward
		$IPTABLES -t nat -A POSTROUTING -o eth0 -j MASQUERADE
		$IPTABLES -A FORWARD -i eth1 -j ACCEPT
		$IPTABLES -A FORWARD -o eth1 -j ACCEPT
	fi
	
	# Open DNS
	$IPTABLES -A OUTPUT -p udp --dport 53 -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp --dport 53 -j ACCEPT
	
	# SSH access to server
	for ip in $SSHACCESSnew; do
  		$IPTABLES -A INPUT -p tcp --dport $SSHPORT -s $ip -j ACCEPT
  		$IPTABLES -A OUTPUT -p tcp --dport $SSHPORT -s $ip -j ACCEPT
  	done
  	
  	# TCP ports to be fully open on server
	for port in $TCPPORTS ; do
  		$IPTABLES -A INPUT -p tcp --dport $port -j ACCEPT
  		$IPTABLES -A OUTPUT -p tcp --dport $port -j ACCEPT
  	done
  	
  	# TCP ports to open for incoming connections
  	for port in $TCPPORTS_INPUT ; do
  		$IPTABLES -A INPUT -p tcp --dport $port -j ACCEPT
  		$IPTABLES -A OUTPUT -p tcp --dport $port -m state --state ESTABLISHED,RELATED -j ACCEPT
  	done
  	
  	# TCP ports to open for outgoing connections
  	for port in $TCPPORTS_OUTPUT ; do
  		$IPTABLES -A OUTPUT -p tcp --dport $port -j ACCEPT
  		$IPTABLES -A INPUT -p tcp --dport $port -m state --state ESTABLISHED,RELATED -j ACCEPT
  	done
  	
  	# UDP for NTP
  	#$IPTABLES -A INPUT -p udp --dport 123 -j ACCEPT
	$IPTABLES -A OUTPUT -p udp --dport 123 -j ACCEPT
  	
  	# UDP ports to be fully open on server
	for port in $UDPPORTS ; do
		$IPTABLES -A INPUT -p udp --dport $port -j ACCEPT
		$IPTABLES -A OUTPUT -p udp --dport $port -j ACCEPT
	done
	
	# Add IP addresses with FULL access to server
	for ip in $DMZSnew ; do
		$IPTABLES -A INPUT -s $ip -j ACCEPT
		$IPTABLES -A OUTPUT -d $ip -j ACCEPT
	done
	
	# Add IP ranges with FULL access to server
	for ip in $DMZRANGE ; do
		$IPTABLES -A INPUT -m iprange --src-range $ip -j ACCEPT
		$IPTABLES -A OUTPUT -m iprange --dst-range $ip -j ACCEPT
	done
	
	# Add IP addresses with NO access to server
	for ip in $BLACKLIST ; do
    	$IPTABLES -A INPUT -s $ip -j DROP
    	$IPTABLES -A OUTPUT -s $ip -j DROP
    done
    
    # Add IP ranges with NO access to server
	for ip in $BLOCKRANGE ; do
    	$IPTABLES -A INPUT -m iprange --src-range $ip -j DROP
		$IPTABLES -A OUTPUT -m iprange --src-range $ip -j DROP
	done
	
	# Multicast option for loadbalancers and cluster configs
	if [ "$MULTICAST_ENABLE" == "TRUE" ]; then
		$IPTABLES -A INPUT -s 224.0.0.0/4 -j ACCEPT
		$IPTABLES -A INPUT -d 224.0.0.0/4 -j ACCEPT
		$IPTABLES -A OUTPUT -s 224.0.0.0/4 -j ACCEPT
		$IPTABLES -A OUTPUT -d 224.0.0.0/4 -j ACCEPT
		$IPTABLES -A INPUT -s 240.0.0.0/5 -j ACCEPT
		$IPTABLES -A INPUT -d 240.0.0.0/5 -j ACCEPT
		$IPTABLES -A OUTPUT -s 240.0.0.0/5 -j ACCEPT
		$IPTABLES -A OUTPUT -d 240.0.0.0/5 -j ACCEPT
		$IPTABLES -A INPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IPTABLES -A INPUT -m pkttype --pkt-type broadcast -j ACCEPT
		$IPTABLES -A OUTPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IPTABLES -A OUTPUT -m pkttype --pkt-type broadcast -j ACCEPT
	fi
	
	# OPEN outgoing SMTP with spam limiter
	$IPTABLES -A OUTPUT -d 127.0.0.1 -p tcp -m tcp --dport 25 -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
	
	# Important ICMP options
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type host-unreachable -j ACCEPT
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type port-unreachable -j ACCEPT
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type fragmentation-needed -j ACCEPT
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type source-quench -j ACCEPT
	#$IPTABLES -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
	#$IPTABLES -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
	
	# Outgoing PING allowed
	$IPTABLES -A OUTPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
	$IPTABLES -A OUTPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
	
	$IPTABLESSAVE > $iptablesFile
	
# IP6TABLES
	
	# Default actions
	$IP6TABLES -P INPUT DROP
	$IP6TABLES -P FORWARD DROP
	$IP6TABLES -P OUTPUT DROP
	
	# Localhost
	$IP6TABLES -A INPUT -i lo -j ACCEPT
	$IP6TABLES -A OUTPUT -o lo -j ACCEPT
	
	# Default state
	$IP6TABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	$IP6TABLES -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# Open DNS
	$IP6TABLES -A OUTPUT -p udp --dport 53 -j ACCEPT
	$IP6TABLES -A INPUT  -p udp --dport 53 -j ACCEPT
	$IP6TABLES -A OUTPUT -p tcp --dport 53 -j ACCEPT
	$IP6TABLES -A INPUT  -p tcp --dport 53 -j ACCEPT
	
	# SSH access to server
	for ip in $SSHACCESS_IPv6; do
  		$IP6TABLES -A INPUT -p tcp --dport $SSHPORT -s $ip -j ACCEPT
  		$IP6TABLES -A OUTPUT -p tcp --dport $SSHPORT -s $ip -j ACCEPT
  	done
  	
  	# TCP ports to be fully open on server
	for port in $TCPPORTS ; do
  		$IP6TABLES -A INPUT -p tcp --dport $port -j ACCEPT
  		$IP6TABLES -A OUTPUT -p tcp --dport $port -j ACCEPT
  	done 	
 	
  	# TCP ports to open for incoming connections
  	for port in $TCPPORTS_INPUT ; do
  		$IP6TABLES -A INPUT -p tcp --dport $port -j ACCEPT
  		$IP6TABLES -A OUTPUT -p tcp --dport $port -m state --state ESTABLISHED,RELATED -j ACCEPT
  	done
  	
  	# TCP ports to open for outgoing connections
  	for port in $TCPPORTS_OUTPUT ; do
  		$IP6TABLES -A OUTPUT -p tcp --dport $port -j ACCEPT
  		$IP6TABLES -A INPUT -p tcp --dport $port -m state --state ESTABLISHED,RELATED -j ACCEPT
  	done
  	
  	# UDP ports to be fully open on server
  	for port in $UDPPORTS ; do
		$IP6TABLES -A INPUT -p udp --dport $port -j ACCEPT
		$IP6TABLES -A OUTPUT -p udp --dport $port -j ACCEPT
	done
	
	# Add IP ranges with FULL access to server
	for ip in $DMZS_IPv6 ; do
		$IP6TABLES -A INPUT -m iprange --src-range $ip -j ACCEPT
		$IP6TABLES -A OUTPUT -m iprange --dst-range $ip -j ACCEPT
	done
	
	# Add IP ranges with NO access to server
	for ip in $BLACKLIST_IPv6 ; do
    	$IP6TABLES -A INPUT -s $ip -j DROP
    	$IP6TABLES -A OUTPUT -s $ip -j DROP
    done
	
	# Multicast option for loadbalancers and cluster configs
	if [ "$MULTICAST_ENABLE" == "TRUE" ]; then
		$IP6TABLES -A INPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IP6TABLES -A INPUT -m pkttype --pkt-type broadcast -j ACCEPT
		$IP6TABLES -A OUTPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IP6TABLES -A OUTPUT -m pkttype --pkt-type broadcast -j ACCEPT
		$IP6TABLES -A INPUT -d ff00::/8 -j ACCEPT
		$IP6TABLES -A OUTPUT -d ff00::/8 -j ACCEPT
	fi
	
	# OPEN outgoing SMTP with spam limiter
	$IP6TABLES -A OUTPUT -d ::1 -p tcp -m tcp --dport 25 -j ACCEPT
	$IP6TABLES -A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
	
	# Important ICMP
	$IP6TABLES -A INPUT -p icmpv6 -j ACCEPT
	$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type router-advertisement -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type neighbor-advertisement -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type redirect -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type router-advertisement -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type neighbor-advertisement -m hl --hl-eq 255 -j ACCEPT
	$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type redirect -m hl --hl-eq 255 -j ACCEPT
	
	$IP6TABLESSAVE > $ip6tablesFile
	
	
	# IP_CONNTRACK modules
	modprobe ip_conntrack_ftp
	
    echo ""
    echo ""
}

case "$1" in
  start)
    echo "Starting firewall..."
    setup
    ;;
  stop)
    echo "Stopping firewall..."
    purge
    ;;
  restart)
    echo "Stopping firewall..."
    purge
    echo "Starting firewall..."
    setup
    ;;
  status)
    iptables -n -L
    ip6tables -n -L
    ;;
  *)
    echo "Usage: $0 <start|stop|restart|status>"
    ;;
esac